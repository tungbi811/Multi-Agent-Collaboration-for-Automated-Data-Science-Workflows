web_search:
  template: |
    Based on these search results: {search_results}

    User question: {message}

    Please provide a comprehensive and helpful response using the search information above:
    - Synthesize the information from multiple sources
    - Focus on accuracy and relevance 
    - Include specific details and data when available
    - If the search results don't fully answer the question, mention what additional information might be needed
    - Keep the response conversational and easy to understand
  
  model: "gpt-3.5-turbo"
  temperature: 0.7

pdf_analysis:
  template: |
    Based on these PDF analysis results: {analysis_results}

    User request: {message}

    Please provide a clear and comprehensive response based on the PDF content analysis:
    - Summarize the key points relevant to the user's request
    - Extract specific information, data, or insights that address the question
    - If analyzing the entire document, provide an executive summary with main themes
    - Highlight any important findings, conclusions, or recommendations
    - If the PDF content doesn't fully address the request, mention what aspects are covered vs. missing
    - Keep the response well-structured and easy to follow
  
  model: "gpt-3.5-turbo"
  temperature: 0.3

code_generation:
  template: |
    User request: {user_message}

    Please generate Python code to solve this request following these guidelines:

    **ALLOWED IMPORTS ONLY:**
    - math, statistics, datetime, json, csv, random
    - pandas, numpy, matplotlib.pyplot, seaborn, scipy

    **CODE REQUIREMENTS:**
    - Use print() statements to show results
    - Include clear comments explaining what each section does
    - Keep code simple, readable, and focused on the task
    - Handle potential errors gracefully where appropriate
    - Use descriptive variable names

    **RESPONSE FORMAT:**
    - Wrap your code in ```python code blocks
    - Provide a brief explanation before the code if needed
    - Show expected output or results after the code

    **SAFETY:**
    - No file system operations beyond reading/writing basic data files
    - No network requests or external API calls
    - No system commands or subprocess calls
  
  model: "gpt-3.5-turbo"
  temperature: 0.1

data_analysis:
  template: |
    You are a data science assistant. Analyze the following data and provide insights:

    Data: {data}
    User request: {message}

    Please provide:
    1. Data summary and key statistics
    2. Patterns or trends identified
    3. Relevant visualizations (describe what should be plotted)
    4. Actionable insights and recommendations
    5. Any data quality issues or limitations noted

    Be thorough but concise in your analysis.
  
  model: "gpt-3.5-turbo" 
  temperature: 0.2

# Agent configuration
multi_agent:
  # Agent role configurations
  agents:
    data_analyst:
      model: "gpt-3.5-turbo"
      temperature: 0.3
      max_tokens: 2000
      description: "Specializes in data quality analysis, EDA, and preprocessing"
      
    ml_engineer:
      model: "gpt-4"
      temperature: 0.1
      max_tokens: 2500
      description: "Handles model building, training, and evaluation"
      
    business_translator:
      model: "gpt-3.5-turbo"
      temperature: 0.5
      max_tokens: 1500
      description: "Converts technical results into business recommendations"
      
    project_manager:
      model: "gpt-3.5-turbo"
      temperature: 0.2
      max_tokens: 1000
      description: "Orchestrates workflow and manages transitions"

  # Phase-specific prompts for fallback when CodeAct prompts need supplementing
  phases:
    data_understanding:
      template: |
        You are analyzing a dataset for data quality and characteristics.
        
        Dataset: {dataset_path}
        Context: {context}
        
        Generate Python code to:
        1. Load and examine the dataset structure
        2. Identify data types and missing values
        3. Generate statistical summaries
        4. Detect potential data quality issues
        5. Save findings to workspace for other agents
        
        Focus on comprehensive analysis and clear documentation of findings.
      model: "gpt-3.5-turbo"
      temperature: 0.3

    data_preparation:
      template: |
        You are preparing data for machine learning based on previous analysis.
        
        Data Issues Found: {issues}
        Context: {context}
        
        Generate Python code to:
        1. Address identified data quality issues
        2. Handle missing values appropriately
        3. Encode categorical variables if needed
        4. Create derived features if beneficial
        5. Validate the cleaned dataset
        6. Save preprocessed data for modeling
        
        Ensure all preprocessing steps are documented and reversible.
      model: "gpt-3.5-turbo"
      temperature: 0.2

    modeling:
      template: |
        You are building machine learning models based on prepared data.
        
        Preprocessing Results: {preprocessing_info}
        Context: {context}
        
        Generate Python code to:
        1. Load the preprocessed dataset
        2. Split data into train/validation/test sets
        3. Train multiple algorithms (RandomForest, XGBoost, LogisticRegression)
        4. Evaluate models using appropriate metrics
        5. Select the best performing model
        6. Save model results and performance metrics
        
        Focus on robust evaluation and comparison of different approaches.
      model: "gpt-4"
      temperature: 0.1

    business_translation:
      template: |
        You are translating technical ML results into business recommendations.
        
        Model Results: {model_results}
        Data Analysis: {data_analysis}
        Original Request: {user_request}
        
        Generate Python code to:
        1. Load and analyze technical results
        2. Identify key business insights
        3. Calculate potential business impact
        4. Generate specific, actionable recommendations
        5. Estimate implementation effort and ROI
        6. Save business recommendations
        
        Focus on practical, implementable business value.
      model: "gpt-3.5-turbo"
      temperature: 0.5

# Workflow configuration
workflow:
  max_iterations: 10
  timeout_minutes: 15
  retry_attempts: 3
  
  # Default phase sequence
  phases:
    - data_understanding
    - data_preparation
    - modeling
    - business_translation
  
  # Required outputs for each phase
  required_outputs:
    data_understanding: ["data_profile.json"]
    data_preparation: ["cleaned_data_info.json"]
    modeling: ["model_results.json"]
    business_translation: ["business_recommendations.json"]

# Error handling prompts
error_handling:
  code_execution_error:
    template: |
      The following code execution failed:
      
      Code: {failed_code}
      Error: {error_message}
      Context: {context}
      
      Please analyze the error and generate corrected Python code that:
      1. Addresses the specific error that occurred
      2. Includes proper error handling
      3. Achieves the original objective
      4. Is more robust against similar failures
      
      Provide only the corrected code without repeating the error.
    model: "gpt-3.5-turbo"
    temperature: 0.2

  workflow_failure:
    template: |
      The workflow failed at phase: {failed_phase}
      Error details: {error_details}
      Completed tasks: {completed_tasks}
      
      Suggest recovery actions:
      1. What went wrong and why
      2. How to fix the immediate issue
      3. Whether to retry or skip to next phase
      4. Any data or state that needs correction
    model: "gpt-3.5-turbo"
    temperature: 0.3